#!/usr/bin/env python
# -*- mode: python -*-
import re
import sys
import shutil
import zipfile
import argparse
import subprocess

from pathlib import Path
from colorama import init as colorama_init
from colorama import Fore, Style

colorama_init()

SCRIPT_FILE = Path(__file__)
ROOT_DIR = SCRIPT_FILE.parent.parent.resolve()
SRC_DIR = ROOT_DIR / "src"
DIST_DIR = ROOT_DIR / "dist"
BUILD_DIR = ROOT_DIR / "build"
C_DIR = BUILD_DIR / "c"
JAVA_DIR = BUILD_DIR / "java"
MATLAB_DIR = BUILD_DIR / "matlab"
OCTAVE_DIR = BUILD_DIR / "octave"
PYTHON_DIR = BUILD_DIR / "python"
RUST_DIR = BUILD_DIR / "rust"

CORE_FILES = [
    "src/coco_random.cpp",
    "src/coco_suite.cpp",
    "src/coco_observer.cpp",
    "src/coco_archive.cpp",
    "src/coco_version.cpp",
]


def info(step, message):
    print(f"{Style.RESET_ALL}{Style.BRIGHT}{Fore.BLUE}{step.upper()}{Style.NORMAL}{Fore.RESET}\t{message}",
          file=sys.stderr)

class Amalgator:
    """Amalgamate a set of files into a single file for unity builds."""
    def __init__(self, destination_file, release):
        self.release = release
        self.included_files = []
        self.destination_fd = open(destination_file, 'w')
        self.destination_fd.write("""
/************************************************************************
 * WARNING
 *
 * This file is an auto-generated amalgamation.
 *
 * DO *NOT* EDIT! ALL CHANGES WILL BE LOST!
 ************************************************************************/

""")

    def finish(self):
        self.destination_fd.close()

    def __del__(self):
        self.finish()

    def process_file(self, filename):
        if filename in self.included_files:
            return
        self.included_files.append(filename)
        with open(filename) as fd:
            line_number = 1
            if not self.release:
                self.destination_fd.write("#line %i \"%s\"\n" % (line_number, filename.name))
            for line in fd.readlines():
                ## Is this an include statement?
                matches = re.match("#include \"(.*)\"", line)
                if matches:
                    include_file = filename.parent / matches.group(1)
                    ## Has this file not been included previously?
                    if include_file not in self.included_files:
                        self.process_file(include_file)
                    if not self.release:
                        self.destination_fd.write("#line %i \"%s\"\n" %
                                                  (line_number + 1, filename.name))
                else:
                    self.destination_fd.write(line)
                line_number += 1


def amalgamate(source_files, destination_file, release=False, verbose=False):
    """Amalgamate a list of source files into a single unity build file

    Parameters
    ----------

    source_files
        List of files to amalgamate
    destination_file
        Unity build file name
    release
        If False, embed information about the file name and line number
        where the source originated into the `destination_file`.
    verbose
        Show which files are included in the amalgamation.
    """
    info("aml", destination_file)
    amalgator = Amalgator(ROOT_DIR / destination_file, release)
    if isinstance(source_files, str):
        source_files = [source_files]
    for filename in source_files:
        if verbose:
            info("", f"include {filename}")
        if isinstance(filename, str):
            filename = Path(filename)
        if not filename.is_absolute():
            filename = ROOT_DIR / filename
        amalgator.process_file(filename)
    amalgator.finish()


def git(args):
    """Run a git command and return its output.

    All errors are deemed fatal and the system will quit.

    WARNING: This method is also defined in ../../code-postprocessing/cocopp/toolsdivers.py.
    If you change something you have to change it in both files.
    """
    full_command = ['git', *args]
    output = subprocess.check_output(full_command,
                                     stderr=subprocess.STDOUT,
                                     universal_newlines=True)
    output = output.rstrip()
    return output


def git_version(format="pep440"):
    """Return somewhat readible version number from git, like
    '0.1-6015-ga0a3769' if not pep440 else '0.1.6015'

    """
    try:
        res = git(['describe', '--tags']).lstrip("v").split("-")
    except subprocess.CalledProcessError:
        res = ("99.0.0", "0", "0")
    if len(res) == 1: # Clean tagged release
        if format == "rust":
            return res[0].replace("rc", "-rc")
        else:
            return res[0]
    else:
        version, offset, hash = res
        offset = int(offset)
        major, minor, release = version.split(".")
        is_prerelease = False
        is_rc = "rc" in release
        for suffix in ["a", "b", "rc"]:
            if suffix in release:
                release = release[:release.index(suffix)]
                is_prerelease = True
        if is_prerelease:
            release = int(release) - 1

        if format == "pep440":
            return f"{major}.{minor}.{int(release) + 1}-dev{offset}+{hash}"
        elif format == "rust":
            # Rust expects release candidates to be tagged -rcX not rcX...
            if is_rc:
                release = f"{release+1}-rc"
            return f"{major}.{minor}.{release}-dev.{offset}+{hash}"
        else:
            raise(f"Unknown version format '{format}'.")


def git_revision():
    """Return unreadible git revision identifier"""
    return git(['rev-parse', 'HEAD'])


def copy_file(source, destination, verbose=True):
    if isinstance(source, str):
        source = Path(source)
    if isinstance(destination, str):
        destination = Path(destination)

    if source.is_absolute():
        source = source.relative_to(ROOT_DIR)
    if destination.is_absolute():
        destination = destination.relative_to(ROOT_DIR)
    if verbose:
        info("copy", f"{source} -> {destination}")
    shutil.copy(ROOT_DIR / source, ROOT_DIR / destination)


def write_version_file(filename, version):
    info("version", f"{version} -> {filename}")
    with open(ROOT_DIR / filename, 'wt') as fd:
        fd.write(version)


def write_version_to_python(filename, version):
    info("version", f"{version} -> {filename}")
    with open(ROOT_DIR / filename, "wt") as fd:
        fd.write(f"""# file generated by fabricate
# Do not change, do not track in version control!

__version__ = "{version}"
version = __version__

if __name__ == "__main__":
    print(version)
""")

def write_version_to_c_file(filename, version,
                               variable="coco_version",
                               guard="COCO_VERSION"):
    info("version", f"{version} -> {filename}")
    with open(ROOT_DIR / filename, "wt") as fd:
        fd.write("/* file generated by fabricate.py\n")
        fd.write(" * don't change, don't track in version control!\n")
        fd.write(" */\n\n")
        fd.write(f'const char *{ variable } = "{ version }";\n')

################################################################################
## MAIN

parser = argparse.ArgumentParser(prog="fabricate", description="""
Fabricate a complete set of build files by amalgamating the C sources
and writing version information into various places. No matter what is
skipped, version information is always updated.""")

parser.add_argument("-v", "--verbose", action="store_true",
              help="More verbose output")
parser.add_argument("-r", "--release", action="store_true",
              help="Amalgamate in release mode by stripping line number and file information.")
parser.add_argument("--skip-c", action="store_true",
              help="Skip fabricating C cocoex code.")
parser.add_argument("--skip-java", action="store_true",
              help="Skip fabricating Java cocoex code.")
parser.add_argument("--skip-matlab", action="store_true",
              help="Skip fabricating Matlab cocoex code.")
parser.add_argument("--skip-octave", action="store_true",
              help="Skip fabricating Octave cocoex code.")
parser.add_argument("--skip-python", action="store_true",
              help="Skip fabricating Python cocoex code.")
parser.add_argument("--skip-rust", action="store_true",
              help="Skip fabricating Rust cocoex code.")
parser.add_argument("--skip-unit-tests", action="store_true",
              help="Skip fabricating C unit tests.")
parser.add_argument("--skip-integration-tests", action="store_true",
              help="Skip fabricating integration tests.")
args = parser.parse_args()

COCO_VERSION = git_version()
COCO_RUST_VERSION = git_version(format="rust")
write_version_file(".version", COCO_VERSION)


DIST_DIR.mkdir(exist_ok=True)
C_DISTFILE = DIST_DIR / f"cocoex-c-{COCO_VERSION}.zip"
MATLAB_DISTFILE = DIST_DIR / f"cocoex-matlab-{COCO_VERSION}.zip"
OCTAVE_DISTFILE = DIST_DIR / f"cocoex-octave-{COCO_VERSION}.zip"
JAVA_DISTFILE = DIST_DIR / f"cocoex-java-{COCO_VERSION}.zip"
RUST_DISTFILE = DIST_DIR / f"cocoex-rust-{COCO_VERSION}.zip"

write_version_to_c_file("src/coco_version.cpp", COCO_VERSION)

if not args.skip_c:
    write_version_file("build/c/VERSION", COCO_VERSION)
    amalgamate(CORE_FILES + ['src/coco_runtime_c.cpp'],
               C_DIR / 'coco.cpp',args.release)
    amalgamate('src/coco.h',
               C_DIR / 'coco.h',args.release)
    copy_file('src/bbob2009_testcases.txt',
              'build/c/')
    copy_file('build/c/coco.cpp',
              'examples/bbob2009-c-cmaes/coco.cpp')
    copy_file('build/c/coco.h',
              'examples/bbob2009-c-cmaes/coco.h')

    info("BUNDLE", f"C -> {C_DISTFILE.name}")
    with zipfile.ZipFile(C_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in C_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-c/{fn.name}")

if not args.skip_python:
    write_version_to_python("build/python/src/cocoex/_version.py", COCO_VERSION)
    amalgamate(CORE_FILES + ['src/coco_runtime_c.cpp'],
               'build/python/src/cocoex/coco.cpp',
              args.release)
    amalgamate('src/coco.h',
               'build/python/src/cocoex/coco.h',
              args.release)
    copy_file('src/bbob2009_testcases.txt',
              'build/python/tests/bbob2009_testcases.txt')
    copy_file('src/bbob2009_testcases2.txt',
              'build/python/tests/bbob2009_testcases2.txt')

if not args.skip_matlab:
    write_version_file("build/matlab/VERSION", COCO_VERSION)
    amalgamate(CORE_FILES + ['src/coco_runtime_matlab.cpp'],
               MATLAB_DIR / 'coco.cpp', args.release)
    amalgamate('src/coco.h', MATLAB_DIR / 'coco.h', args.release)

    info("BUNDLE", f"Matlab -> {MATLAB_DISTFILE.name}")
    with zipfile.ZipFile(MATLAB_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in MATLAB_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-matlab/{fn.name}")

if not args.skip_octave:
    amalgamate(CORE_FILES + ['src/coco_runtime_c.cpp'],
               OCTAVE_DIR / "coco.cpp", args.release)
    amalgamate('src/coco.h', OCTAVE_DIR / "coco.h", args.release)

    if not args.verbose:
        info("copy", "Matlab files to Octave build root")

    matlab_files = list(MATLAB_DIR.glob("coco*.m"))
    matlab_files.append(MATLAB_DIR / "cons.m")
    matlab_files.append(MATLAB_DIR / "cocoCall.cpp")
    matlab_files.append(MATLAB_DIR / "exampleexperiment.m")
    matlab_files.append(MATLAB_DIR / "my_fmincon.m")
    matlab_files.append(MATLAB_DIR / "my_optimizer.m")
    for file in matlab_files:
        copy_file(file, OCTAVE_DIR / file.name, args.verbose)

    info("BUNDLE", f"Octave -> {OCTAVE_DISTFILE.name}")
    with zipfile.ZipFile(OCTAVE_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in OCTAVE_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-octave/{fn.name}")

if not args.skip_java:
    write_version_file(JAVA_DIR / "VERSION", COCO_VERSION)
    amalgamate(CORE_FILES + ['src/coco_runtime_c.cpp'], JAVA_DIR / "coco.cpp", args.release)
    amalgamate('src/coco.h', JAVA_DIR / "coco.h", args.release)

    info("BUNDLE", f"Java -> {JAVA_DISTFILE.name}")
    with zipfile.ZipFile(JAVA_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in JAVA_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-java/{fn.name}")

if not args.skip_rust:
    import toml
    write_version_file(RUST_DIR / "VERSION", COCO_VERSION)
    amalgamate(CORE_FILES + ['src/coco_runtime_c.cpp'],
               RUST_DIR / 'coco-sys/vendor/coco.cpp',
               args.release)
    amalgamate('src/coco.h', RUST_DIR / 'coco-sys/vendor/coco.h', args.release)
    # FIXME: Why?
    copy_file('src/coco_internal.h',
          RUST_DIR / 'coco-sys/vendor/coco_internal.h')

    info("TOML", f"build/rust/Cargo.toml")
    cr = toml.load(RUST_DIR / "Cargo.toml.in")
    cr["package"]["version"] = COCO_RUST_VERSION
    cr["dependencies"]["coco-sys"]["version"] = COCO_RUST_VERSION.split("+")[0]
    with open(RUST_DIR / "Cargo.toml", "w") as fd:
        toml.dump(cr, fd)

    info("TOML", f"build/rust/coco-sys/Cargo.toml")
    cs = toml.load(RUST_DIR / "coco-sys" / "Cargo.toml.in")
    cs["package"]["version"] = COCO_RUST_VERSION
    with open(RUST_DIR / "coco-sys" / "Cargo.toml", "w") as fd:
        toml.dump(cs, fd)

    info("BUNDLE", f"Rust -> {RUST_DISTFILE.name}")
    with zipfile.ZipFile(RUST_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in RUST_DIR.glob("**/*"):
            if fn.is_file():
                archive.write(fn, arcname=f"cocoex-rust/{fn.relative_to(RUST_DIR)}")

if not args.skip_unit_tests:
    amalgamate(CORE_FILES + ['src/coco_runtime_c.cpp'], "test/unit-test/coco.cpp", args.release)
    amalgamate('src/coco.h', "test/unit-test/coco.h", args.release)

if not args.skip_integration_tests:
    amalgamate(CORE_FILES + ["src/coco_runtime_c.cpp"], "test/integration-test/coco.cpp", args.release)
    amalgamate("src/coco.h", "test/integration-test/coco.h", args.release)
