#!/usr/bin/env python
"""test all bbob-noisy suite against
data generated by the legacy code.
"""
from __future__ import division, print_function
from ast import literal_eval  # safe evaluation/execution of Python code
import os, sys
import time
import numpy as np
import re
import cocoex as ex
import pickle   
try:
    from urllib.request import urlretrieve
except ImportError:
    from urllib import urlretrieve
try: time.process_time = time.clock
except: pass

def _is_equal(x, y):
    """return scalar or vector, where `x` and `y` can be a scalar
    or list/array_type
    """
    x, y = np.asarray(x), np.asarray(y)
    same_sign = x * y > 0
    ax, ay = np.abs(x), np.abs(y)
    lgx, lgy = np.log10(ax), np.log10(ay)
    return ((np.abs(x - y) < 1e-6) or  # "+" means in effect "or"
            same_sign * (np.abs(x - y) / (ax + ay) < 2e-9) or  # min(ax, ay) would be better?
            same_sign * (ax > 1e21) * (ay > 1e21)  # *  # because coco.h defines INFINITY possibly as 1e22
           ) # (np.abs(lgx - lgy) / (lgx + lgy) < 0.7) > 0)  # probably not very useful 

def is_equal(x, y):
    try:
        assert len(x) == len(y)
    except TypeError:
        """scalar case"""
        return _is_equal(x, y)
    else:
        return np.all(_is_equal(x, y))

def read_data_dictionary(filename):
    print(f"reading file at {filename}")
    with open(filename, "rb") as file_:
        best_values_legacy_dictionary = pickle.load(file_, encoding='latin1')
    print("file read!")
    return best_values_legacy_dictionary

def parse_id_string(id_string):
    function_id = re.findall(".*f1(\d{2})", id_string)[0];   function_id = int(function_id)
    instance_id = re.findall(".*i(\d*)", id_string)[0];      instance_id = int(instance_id)
    dimension = re.findall(".*d(\d*)", id_string)[0];        dimension = int(dimension)
    return function_id, instance_id, dimension

def regression_test_bbob_noisy(filename):
    verbose = 0
    failed_test_counter = 0
    passed_test_counter = 0
    suite_name = "bbob-noisy"
    evaluation_history = read_data_dictionary(filename)
    suite = ex.Suite(suite_name, '', '')
    for evaluation in evaluation_history:
        x = evaluation["x"]
        fval = evaluation["fvalue"]
        ftrue = evaluation["ftrue"]
        random_n_seed = evaluation["_randomnseed"]
        random_seed = evaluation["_randomseed"]
        f_id = evaluation["f_id"]
        noise_value = evaluation["noise_value"]
        boundary_handling = evaluation["boundary_handling"]
        function_id, instance_id, dimension = parse_id_string(f_id)
        problem = suite.get_problem_by_function_dimension_instance(function_id, dimension, instance_id)
        y_hat = problem(x) 
        error_string = f_id + " failed the test (_randomnseed %d, _randomseed %d) -> noise_value (legacy) %f, noise_value (current) %f, fval (legacy) %f, yhat (current) %f" % (random_n_seed, random_seed, noise_value, problem.last_noise_value, fval, y_hat) 
        try:
            assert is_equal(fval, y_hat) or fval == y_hat, error_string
            passed_test_counter += 1
        except AssertionError as error:
            print(error)
            failed_test_counter += 1
    if verbose:
        print("done in %.1fs" % (time.process_time() - t0))
    if failed_test_counter > 0:
        print("{} assertions failed, {} tests passed".format(failed_test_counter, passed_test_counter))
    if failed_test_counter == 0:
        print("All tests passed, execution terminating with exit code {}".format(failed_test_counter))

if __name__ == "__main__":
    data_file_path = "code-experiments/test/regression-test/regression-test-bbob-noisy/data_legacy/bbob_noisy_regression_data.json"
    evaluation_dictionary_list = regression_test_bbob_noisy(data_file_path)